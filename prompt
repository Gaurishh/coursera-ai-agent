now for run_agent, before returning result, call a function get_contact_info which accepts the url and the recommended course as input.

It would have a very similar loop with 15 iterations logic where the very first thing it would do is get the urls and text content of the website using the find_urls and browse_website functions.

Then it would give an LLM the content recieved from this browse_website function and ask it to extract the contacts, the master prompt for the same is: CONTACT_EXTRACTION_PROMPT_TEMPLATE = """
Persona:
You are an expert data extraction specialist specializing in contact information discovery from website content.

Context:
Your goal is to analyze the provided text from an institution's website and extract all relevant and actionable contact information, including names, titles/positions, phone numbers, and email addresses.

Rules:

Extract ALL potential contact information found in the provided website content.

Look for names of people, their titles/positions, phone numbers, and email addresses.

Focus on key personnel such as directors, managers, coordinators, heads of departments, etc.

Include both individual contacts and general contact information.

Inclusion Criteria: A contact must only be included in the final list if it contains at least one phone number OR at least one email address. Discard any entries that only have a name and/or title.

If you find multiple contact details for the same person, combine them into one entry.

Be thorough but accurate - only extract information that is clearly present in the text.

Website Content:
{website_content}

Your Task:
Respond ONLY with a valid JSON object containing an array of contact objects. Each contact object should have the following structure (include only the fields that are available):
{{
"contacts": [
{{
"name": "Full Name",
"title": "Job Title/Position",
"phone": "Phone Number",
"email": "Email Address"
}},
{{
"name": "Another Person",
"title": "Another Title",
"phone": "Another Phone"
}},
...
]
}}

Note: Only include the fields that are available in the source text. If a field is not available, simply omit it from the contact object.
If no actionable contact information is found, return: {{"contacts": []}}
"""

Unlike the run_agent function it wont accumulate the text content of each url iterated until now, rather it would only consider the text content of the url currently the loop is exploring